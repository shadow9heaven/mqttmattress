/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE PUMP_STATUS PACKING
package MAVLink.smartmattress;
import MAVLink.MAVLinkPacket;
import MAVLink.Messages.MAVLinkMessage;
import MAVLink.Messages.MAVLinkPayload;
        
/**
 * mattress pressure sensor
 */
public class msg_pump_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_PUMP_STATUS = 57;
    public static final int MAVLINK_MSG_LENGTH = 14;
    private static final long serialVersionUID = MAVLINK_MSG_ID_PUMP_STATUS;

      
    /**
     * uint32_t
     */
    public long timestamp;
      
    /**
     * uint8_t[10]
     */
    public short status[] = new short[10];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_PUMP_STATUS;
        
        packet.payload.putUnsignedInt(timestamp);
        
        for (int i = 0; i < status.length; i++) {
            packet.payload.putUnsignedByte(status[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a pump_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.timestamp = payload.getUnsignedInt();
         
        for (int i = 0; i < this.status.length; i++) {
            this.status[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_pump_status() {
        this.msgid = MAVLINK_MSG_ID_PUMP_STATUS;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_pump_status( long timestamp, short[] status) {
        this.msgid = MAVLINK_MSG_ID_PUMP_STATUS;

        this.timestamp = timestamp;
        this.status = status;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_pump_status( long timestamp, short[] status, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_PUMP_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.timestamp = timestamp;
        this.status = status;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_pump_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_PUMP_STATUS;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_PUMP_STATUS - sysid:"+sysid+" compid:"+compid+" timestamp:"+timestamp+" status:"+status+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_PUMP_STATUS";
    }
}
        