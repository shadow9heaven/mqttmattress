/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ADJUST_HARDNESS PACKING
package MAVLink.smartmattress;
import MAVLink.MAVLinkPacket;
import MAVLink.Messages.MAVLinkMessage;
import MAVLink.Messages.MAVLinkPayload;
        
/**
 * Adjust mattress hardness(head, neck, shoulder, waist, buttocks, feet)
 */
public class msg_adjust_hardness extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ADJUST_HARDNESS = 52;
    public static final int MAVLINK_MSG_LENGTH = 4;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ADJUST_HARDNESS;

      
    /**
     * set, get ack
     */
    public short pk_type;
      
    /**
     * 0x00/0x01/0x02
     */
    public short sub_bed;
      
    /**
     * 0x01~0x06
     */
    public short pos;
      
    /**
     * 0x00~0x14
     */
    public short level;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ADJUST_HARDNESS;
        
        packet.payload.putUnsignedByte(pk_type);
        packet.payload.putUnsignedByte(sub_bed);
        packet.payload.putUnsignedByte(pos);
        packet.payload.putUnsignedByte(level);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a adjust_hardness message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.pk_type = payload.getUnsignedByte();
        this.sub_bed = payload.getUnsignedByte();
        this.pos = payload.getUnsignedByte();
        this.level = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_adjust_hardness() {
        this.msgid = MAVLINK_MSG_ID_ADJUST_HARDNESS;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_adjust_hardness( short pk_type, short sub_bed, short pos, short level) {
        this.msgid = MAVLINK_MSG_ID_ADJUST_HARDNESS;

        this.pk_type = pk_type;
        this.sub_bed = sub_bed;
        this.pos = pos;
        this.level = level;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_adjust_hardness( short pk_type, short sub_bed, short pos, short level, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ADJUST_HARDNESS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.pk_type = pk_type;
        this.sub_bed = sub_bed;
        this.pos = pos;
        this.level = level;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_adjust_hardness(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ADJUST_HARDNESS;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

            
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ADJUST_HARDNESS - sysid:"+sysid+" compid:"+compid+" pk_type:"+pk_type+" sub_bed:"+sub_bed+" pos:"+pos+" level:"+level+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ADJUST_HARDNESS";
    }
}
        