/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LOGGER_MSG PACKING
package MAVLink.logger;
import MAVLink.MAVLinkPacket;
import MAVLink.Messages.MAVLinkMessage;
import MAVLink.Messages.MAVLinkPayload;
        
/**
 * Logger message
 */
public class msg_logger_msg extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_LOGGER_MSG = 21;
    public static final int MAVLINK_MSG_LENGTH = 21;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LOGGER_MSG;

      
    /**
     * char
     */
    public byte log_type;
      
    /**
     * char[20]
     */
    public byte log_msg[] = new byte[20];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_LOGGER_MSG;
        
        packet.payload.putByte(log_type);
        
        for (int i = 0; i < log_msg.length; i++) {
            packet.payload.putByte(log_msg[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a logger_msg message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.log_type = payload.getByte();
         
        for (int i = 0; i < this.log_msg.length; i++) {
            this.log_msg[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_logger_msg() {
        this.msgid = MAVLINK_MSG_ID_LOGGER_MSG;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_logger_msg( byte log_type, byte[] log_msg) {
        this.msgid = MAVLINK_MSG_ID_LOGGER_MSG;

        this.log_type = log_type;
        this.log_msg = log_msg;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_logger_msg( byte log_type, byte[] log_msg, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_LOGGER_MSG;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.log_type = log_type;
        this.log_msg = log_msg;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_logger_msg(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_LOGGER_MSG;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

       
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setLog_Msg(String str) {
        int len = Math.min(str.length(), 20);
        for (int i=0; i<len; i++) {
            log_msg[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<20; i++) {            // padding for the rest of the buffer
            log_msg[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getLog_Msg() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 20; i++) {
            if (log_msg[i] != 0)
                buf.append((char) log_msg[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_LOGGER_MSG - sysid:"+sysid+" compid:"+compid+" log_type:"+log_type+" log_msg:"+log_msg+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_LOGGER_MSG";
    }
}
        